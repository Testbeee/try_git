grammar Simple
  rule statement
    sequence
  end

  rule sequence
    first:sequenced_statement ignore ';' ignore second:sequence {
      def to_ast(env)
        Sequence.new(first.to_ast(env), second.to_ast(env))
      end
    }
    /
    sequenced_statement
  end

  rule sequenced_statement
    while / assign / if / print_seq / clos_apply / expression / do_nothing
  end

  rule while
    ignore 'while' ignore '(' ignore condition:expression ignore ')' ignore '{' ignore body:statement ignore '}' ignore {
      def to_ast(env)
        While.new(condition.to_ast(env), body.to_ast(env))
      end
    }
  end

  rule assign
    name:[a-z]+ ignore '=' ignore expression {
      def to_ast(env)
        Assign.new(name.text_value.to_sym, expression.to_ast(env))
      end
    }
  end

  rule if
   ignore 'if' ignore '(' ignore condition:expression ignore ')' ignore '{' ignore consequence:statement ignore '}' ignore 'else' ignore '{' ignore alternative:statement ignore '}' ignore {
      def to_ast(env)
        If.new(condition.to_ast(env), consequence.to_ast(env), alternative.to_ast(env))
      end
    }
  end

  rule print_seq
    'print' ignore '(' ignore expr:expression ignore ')' ignore {
        def to_ast(env)
            PrintSeq.new(expr.to_ast(env))
        end
    }
  end

  rule clos_apply
    func:variable '[' ex_para:expression ']' {
        def to_ast(env)
            ClosApply.new(func.to_ast(env),ex_para.to_ast(env))
        end            
    }
  end

  rule do_nothing
    'do-nothing' {
      def to_ast(env)
        DoNothing.new
      end
    }
  end

  rule expression
    less_than / clos
  end

  rule clos
    '-> ' para:variable ' {' ignore prog:sequence ignore '}' {
        def to_ast(env)
            Clos.new(para.to_ast(env),prog.to_ast(env),{})
        end            
    }
  end

  rule less_than
    left:more_than ignore '<' ignore right:less_than {
      def to_ast(env)
        LessThan.new(left.to_ast(env), right.to_ast(env))
      end
    }
    /
    more_than
  end

  rule more_than
    left:equal_to ignore '>' ignore right:more_than {
      def to_ast(env)
        MoreThan.new(left.to_ast(env), right.to_ast(env))
      end
    }
    /
    equal_to
  end

  rule equal_to
    left:add ignore '==' ignore right:equal_to {
      def to_ast(env)
        EqualTo.new(left.to_ast(env), right.to_ast(env))
      end
    }
    /
    add
  end

  rule add
    left:minus ignore '+' ignore right:add {
      def to_ast(env)
        Add.new(left.to_ast(env), right.to_ast(env))
      end
    }
    /
    minus
  end

  rule minus
    left:multiply ignore '-' ignore right:minus {
      def to_ast(env)
        Minus.new(left.to_ast(env), right.to_ast(env))
      end
    }
    /
    multiply
  end

  rule multiply
    left:divide ignore '*' ignore right:multiply {
      def to_ast(env)
        Multiply.new(left.to_ast(env), right.to_ast(env))
      end
    }
    /
    divide
  end

  rule divide
    left:brackets ignore '/' ignore right:divide {
      def to_ast(env)
        Divide.new(left.to_ast(env), right.to_ast(env))
      end
    }
    /
    brackets
  end

  rule brackets
    ignore '(' ignore expression ignore ')' ignore {
      def to_ast(env)
        expression.to_ast(env)
      end
    }
    /
    term
  end

  rule term
    number / boolean / variable  
  end

  

  rule number
    [0-9]+ {
      def to_ast(env)
        Number.new(text_value.to_i)
      end
    }
  end

  rule boolean
    ('true' / 'false') ![a-z] {
      def to_ast(env)
        Boolean.new(text_value == 'true')
      end
    }
  end

  rule variable
    [a-z]+ {
      def to_ast(env)
        Variable.new(text_value.to_sym)
      end
    }
  end

  rule ignore
    space / newline
  end

  rule space
    " "* {
      def to_ast(env)
      end
    }
  end

  rule newline
    '\n'* {
      def to_ast(env)
      end
    }
  end

  
end
